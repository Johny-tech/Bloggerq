# from django.shortcuts import renderfrom django.core.serializers import serializefrom rest_framework.response import Responsefrom django.http import HttpResponsefrom django.core import serializersfrom .service import get_client_ip, PostFilter , PaginationPostsfrom django.db import modelsfrom django_filters.rest_framework import DjangoFilterBackendfrom rest_framework.decorators import action,permission_classes , api_viewfrom rest_framework import generics, permissions,viewsetsfrom rest_framework.generics import GenericAPIViewfrom rest_framework.mixins import UpdateModelMixinfrom .models import Post , Profile , Comentimport jsonfrom .permissions import IsOwnerOrReadOnlyfrom .serializers import (	PostListSerializer ,	PostUpdateSerializer,	PostDetailSerializer ,	ProfileDetailSerializer ,	ComentCreateSerializer ,	ComentSerializer ,	MembershipSerializer,	CreateRatingSerializer,	ProfileListSerializer,	PostSecondListSerializer,	CreatePostSerializer,)# Create your views here.@api_view(['POST','PUT'])def postUpdate(request, pk=None):			instance = Post.objects.get(id=pk)		# print(request.data['category'])	serializer = PostUpdateSerializer(instance=instance ,data=request.data,partial=True)	if request.method =="PUT":				if serializer.is_valid():			serializer.update()		return Response(serializer.data)class ListPostView(generics.ListAPIView):	queryset = Post.objects.all()	serializer_class = PostListSerializer	filter_backends = (DjangoFilterBackend ,)	filterset_class = PostFilter	pagination_class = PaginationPosts		def get_queryset(self):					posts = Post.objects.all().annotate(			rating_user=models.Count("ratings", filter=models.Q(ratings__ip=get_client_ip(self,request=self.request)))			).annotate(			middle_star=models.Sum(models.F('ratings__star')) / models.Count(models.F('ratings'))				)   		return postsclass ProfileViewSet(viewsets.ModelViewSet):	queryset = Profile.objects.all()	# @action(detail=True, methods=['post'], permission_classes=[permissions.IsAuthenticated])	def retrieve(self, request , username):		user = request.user		try:			profile = Profile.objects.get(user__username=username)		except user.DoesNotExist:			return Response(status=status.HTTP_404_NOT_FOUND)		if 	profile!=user:			return Response({"response":"To profile details allowd only author of this profile."})		serializer = self.get_serializer(profile)		return Response(serializer.data)	@action(detail=True, methods=['post'], permission_classes=[permissions.IsAuthenticated])		def subscribtion(self,request):		# user=Profile.objects.filter(id=pk)		# subscriber=request.user		# subscriber = Profile.objects.filter(id=1)		# if not request.user.is_authenticated or not user.exists():		# 	print(user)		# 	print(subscriber)		# 	return Response({"message":"you are not IsAuthenticated"})		data = {			"user1":request.data['user1'],			"user2":request.data['user2'],			"subtype":request.data['subtype'],		}		#continue coding you should add subtype functional okk??		serializer = self.get_serializer(data = data)		if serializer.is_valid():			serializer.save()		# print(user)		# print(ser)		return Response(serializer.data)	def get_serializer_class(self):		if self.action == "list":			return ProfileListSerializer				elif self.action == "retrieve":			return ProfileDetailSerializer			elif self.action == "subscribtion":						return MembershipSerializer	# def get_permissions(self):	# 	if self.action == 'retrieve':			# 		permissions_classes = [IsOwnerOrReadOnly,]	# 	elif self.action == 'list':				# 		permissions_classes=[permissions.IsAuthenticated,]	# +79152341023	# 	return super().get_permissions()	 # https://hakibenita.com/django-rest-framework-slow this will be usefulclass PostViewSet(viewsets.ModelViewSet):	filter_backends = (DjangoFilterBackend ,)	filterset_class = PostFilter	pagination_class = PaginationPosts	# permission_classes = [permissions.IsAuthenticated|IsOwnerOrReadOnly]		def get_object (self):			obj = Post.objects.get(id=self.kwargs["pk"])				return obj					def get_posts(self):						objs = Post.objects.all()		return objs	def minePosts(self,request):		user = request.user		if not user.is_authenticated:			print(user)			return Response({"message":"you are not Authenticated"})		else:				try:				posts = self.get_queryset().filter(author__user_id=user.id)			except posts.DoesNotExist:				return Response({'error':'You have not posted any content yet'})			serializer = PostListSerializer(data=posts,many=True)						serializer.is_valid()		return Response(serializer.data)	@action(detail=False , methods=['GET'])	def list(self, request):		posts = self.get_queryset()				serializer =PostListSerializer(posts ,many=True) 		return Response(serializer.data)	@action(detail=False,methods = ['GET'])	def recent_posts(self,request):						posts = self.get_queryset().order_by("-date_created")	 		serializer = PostSecondListSerializer(posts,many=True)		return Response(serializer.data)	# def partial_update(self,request ,pk=None):			# 	post=self.get_object()			# 	author = post.author.user	# 	user=request.user 	# 	print(user)	# 	print(author)	# 	if author!=user:	# 		return Response({"response":"you have not been allowed to this page"})	# 	else:	# 		serializer = PostUpdateSerializer(instance=post,data=request.data,partial=True)	# 		if serializer.is_valid():	# 			serializer.save()	# 			return Response(serializer.data)	def retrieve (self, request , pk=None):		post = Post.objects.get(id=pk)									post.viewed = post.viewed+1		post.save(update_fields=("viewed",))		serializer = PostDetailSerializer(post)		return Response(serializer.data)	def get_queryset(self):					posts = Post.objects.all().annotate(			rating_user=models.Count("ratings", filter=models.Q(ratings__ip=get_client_ip(self,request=self.request)))			).annotate(			middle_star=models.Sum(models.F('ratings__star')) / models.Count(models.F('ratings'))			)   		return posts	def get_serializer_class(self):		if self.action == 'list' or self.action == 'minePosts':			return PostListSerializer		elif self.action == "retrieve":			return PostDetailSerializer		elif self.action == "create":			return CreatePostSerializer		elif self.action =="partial_update":			return PostUpdateSerializer				def get_permissions(self):	    if self.action == 'list':	        permission_classes = [permissions.AllowAny]	    else:	        permission_classes = [IsOwnerOrReadOnly]	    return [permission() for permission in permission_classes]# nontype error coz of that u couldnt do that in viewset class PostUpdateView(generics.UpdateAPIView,UpdateModelMixin):	serializer_class = PostUpdateSerializer	queryset = Post.objects.all()	permission_classes=[IsOwnerOrReadOnly,]	def patch(self , request , *args , **kwargs):		return self.partial_update(request, *args, **kwargs)# both of them just retrieve the data from db#this function 20ms faster than function abovedef getObject(request, pk):	obj = Post.objects.get(pk=pk)	data = serializers.serialize('json', [obj, ])	struct = json.loads(data)	data = json.dumps(struct[0])	return HttpResponse(data, content_type='application/json')# https://stackoverflow.com/questions/41110742/django-rest-framework-partial-update# useful link above for partial updateclass ComentCreateView(generics.CreateAPIView):	serializer_class  = ComentCreateSerializer	# def perform_create(self,serializer):	#   serializer.save(author=self.request.user)	#   print(self.request.user)class AddStarRatingViewSet(viewsets.ModelViewSet):		serializer_class = CreateRatingSerializer	def perform_create(self,serializer):		serializer.save(ip=get_client_ip(self,self.request))#pssssst eyyyy yu Rustam i have writen smth for you her you #you must add viewsets: recent posts()  popular() and fix validations here ok??? go!!! sleep!!!!